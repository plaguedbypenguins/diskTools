#!/bin/sh

# (c) rjh - Jul 2011
# licensed under the GPLv3 or later

# run with --quiet if don't want to see the end summary

# for FC disks running as jbods on compute nodes

addr=some_email_address
mach=some_machine

# for cexec via cron
export PATH=${PATH}:/opt/c3-4/

verbose=1
if [ $# -gt 0 ]; then
   verbose=0
fi

# nodes with fc disks
fc="1409-1440,1465-1488"

warnings() {
   for d in `seq 0 1`; do
      cexec -p :$fc "if [ \`/opt/lustre/bin/fcDisksOnPort $d | wc -w\` -ne 16 ]; then echo not 16 disks on port $d; fi" | grep -v ':$' | sed s/^$prefix/WARNING/
   done
}

warnings > /tmp/warn.$$
if [ $verbose -eq 1 ]; then
   cat /tmp/warn.$$
fi

cexec :$fc 'for p in 0 1; do i=0; for f in `/opt/lustre/bin/fcDisksOnPort $p`; do d=`ls -l $f | sed s+.*/++`; d=/dev/$d; g=`/opt/lustre/bin/sdToSg $d`; echo `hostname` $d $g port $p disk $i; smartctl -d scsi -a $f; let i=i+1; done; done' > /tmp/smart.$$

file=$HOME/smart/smart.fc."`date +'%F-%T'`"
if [ $verbose -eq 1 ]; then
   echo $file
fi

touch $file.summary

cat /tmp/warn.$$ > $file
rm /tmp/warn.$$

cat /tmp/smart.$$ >> $file
rm /tmp/smart.$$

# check all same fw and all same model
if [ "`grep odel $file | awk '{print $1,$2,$3,$4}' | sort | uniq -c | wc -l`" != 1 ]; then
   echo ERROR - not all disks the same model >> $file.summary
   grep odel $file | awk '{print $1,$2,$3,$4}' | sort | uniq -c >> $file.summary
fi
if [ "`grep Firmw $file | sort | uniq -c | wc -l`" != 1 ]; then
   echo ERROR - not all SATA disks the same firmware version >> $file.summary
   grep Firmw $file | sort | uniq -c >> $file.summary
fi
# sas
if [ "`grep Device: $file | wc -l`" != 0 ]; then   # if have any sas...
   if [ "`grep Device: $file | sort | uniq -c | wc -l`" != 1 ]; then
      echo ERROR - not all SAS disks the same model/firmware version >> $file.summary
      grep Device: $file | sort | uniq -c >> $file.summary
   fi
fi


cp $file.summary $file.errs

cat $file | $HOME/smart/smartFormat.py --fc blah >> $file.errs
#echo test >> $file.errs
if [ -s $file.errs ]; then
   if [ $verbose -eq 0 ]; then
      /bin/mail -s "$mach disk errors" $addr -- -f $addr < $file.errs
   else
      echo ==================
      echo ERRORS
      echo ==================
      cat $file.errs
      echo ==================
   fi
else
   rm $file.errs
fi

cat $file | $HOME/smart/smartFormat.py --fc >> $file.summary
if [ $verbose -eq 1 ]; then
   cat $file.summary
fi

# tmp as .errs isn't really working...
rm -f $file.errs

gzip $file
